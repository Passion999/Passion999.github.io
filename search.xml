<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[15th-GYCTF]]></title>
    <url>%2F2017%2F06%2F12%2F15th%20GYCTF%2F</url>
    <content type="text"><![CDATA[date: 2017-06-12 14:59:44 tags: CTF第一&amp;二题Web（不是原题但类似）题目说这个过滤了很多敏感符号，于是先构造一下常用的payload： Username:’ or 1=1 # Password:随意 发现or 和 #都被过滤掉了，通过测试发现–也被过滤了，看起来是很可怕，但是不过幸好’没有被过滤，于是构造一个payload: username=travis’=’（一般数据库里不可能有这个小名） password=travis’=’ 这个时候成果获得flag为什么这样可以绕过呢？当提交username=travis’=’&amp;password=travis’=’语句会变成如下： select * from user where username=’travis’=’’ and password=’travis’=’’ 这时候还不够清晰，提取前一段判断出来（后面的同样道理）username=’travis’=’’这是有2个等号，然后计算顺序从左到右，先计算username=’travis’ 一般数据库里不可能有这个小名（若有，就换一个字符串），所以这里返回值为0（相当于false）然后0=’’ 这个结果呢？就是返回1（相当于true）所以这样的注入相当于select from user where 1 and 1也等于 select from user上面那个比较是弱类型的比较，以下情况都会为true 1=’1’ 1=’1.0’ 1=’1后接字母(再后面有数字也可以) ‘0=’除了非0数字开头的字符串’（总体上只要前面达成0的话，要使语句为true很简单，所以这题的万能密码只要按上面的法子去写可以写很多） 第三题（文件上传）题目描述：上传一个php文件！ 随便挑一个小文件，发现它对上传的文件有一定要求：要上传php文件，但是文件类型只支持jpg，gif，png. 所以想到了00截断：%00截断的核心，就是chr(0)这个字符 先说一下这个字符，这个字符不为空(Null)，也不是空字符(“”)，更不是空格！ 当程序在输出含有chr(0)变量时，chr(0)后面的数据会被停止，换句话说，就是误把它当成结束符，后面的数据直接忽略，这就导致漏洞产生 12345path=&quot;upfiles/picture/&quot; file=&quot;20121212.jpg&quot; &lt;font color=#ff0000 face=&quot;黑体&quot;&gt;upfilename=path &amp; file&lt;/font&gt; &apos;最后的上传地址 %&gt; 就这段代码中的path为上传的路径，file为生成的文件名，upfilename为上传后的地址，程序表面是没什么问题，但如果path可以由用户自定义（path这个参数往往是从表单或参数传过来的，能够自定义），所以就产生了上传路径截断漏洞 比如我在表单中把路径改成了“upfiles/1.aspChr(0)”这样上传路径就成了 path=”upfiles/1.aspChr(0)” chr(0)代表那个截断字符这时变量被输出时，就成了upfiles/1.asp而不是upfiles/upfiles/1.aspChr(0)20121212.jpg很明显，upfile/1.asp就成了she11 你可以马上做个实验 把上面的代码修改一下： 12345path=&quot;upfiles/1.asp&quot; &amp; Chr(0) &apos;asp中chr(0)表示截断字符file=&quot;20121212.jpg&quot; upfilename=path &amp; file &apos;最后的上传地址 response.write upfilename %&gt; 眼见为实，你会发现最后输出的upfilename确实是upfile/1.asp，变量输出是这样，上传时生成文件当然也会这样，这就是大家常听到的路径截断上传! 回到题中：我们可以在burp中修改path参数～打开burp： 发现 path=“/uploads/” 文件名 filename=“1493190357627.gif”（gif满足文件要求） 本来最后的上传地址：path &amp; filename /uploads/1493190357627.gif 如果加上%00截断呢？ /uploads/1.php%001493190357627.gif 原文 [第四题] (http://www.shiyanbar.com/ctf/1848)这个很详细链接]]></content>
  </entry>
  <entry>
    <title><![CDATA[New start!]]></title>
    <url>%2F2017%2F06%2F11%2FMy-blog'-start%2F</url>
    <content type="text"><![CDATA[My blog’s start !date: 2017-06-11 21:45:03 几经周折终于搭好了博客（激动），在此记录一下。希望以后自己可以走的更远，不忘初衷的走下去，加油。]]></content>
  </entry>
  <entry>
    <title><![CDATA[my new post]]></title>
    <url>%2F2017%2F06%2F11%2Fmy-new-post%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F06%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[The first program and how to write a blog. Quick StartCreate a new post1$ hexo new "My New Post" (name) 新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。 文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。 More info: Writing ###hexo clean1hexo clean 清除缓存文件 db.json 和已生成的静态文件 public 。 网站显示异常时可以执行这条命令试试。Run server 1$ hexo server(S) 启动本地服务器，用于预览主题。默认地址： http://localhost:4000/ hexo s 是 hexo server 的缩写，命令效果一致； 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可； 对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。 More info: Server Generate static files1$ hexo generate(g) 生成网站静态文件到默认设置的 public 文件夹。 便于查看网站生成的静态文件或者手动部署网站； 如果使用自动部署，不需要先执行该命令； hexo g 是 hexo generate 的缩写，命令效果一致。 More info: Generating Deploy to remote sites1$ hexo deploy(d) 自动生成网站静态文件，并部署到设定的仓库。 hexo d 是 hexo deploy 的缩写，命令效果一致。 More info: Deployment ###hexo new page1$ hexo new page aboutme 新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/ 标题可以为中文，但一般习惯用英文； 页面标题和文章一样可以随意修改； 页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。]]></content>
  </entry>
</search>